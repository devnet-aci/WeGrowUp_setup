#!/bin/bash

# Setup Enxuto - Versão personalizada baseada no SetupOrion
# Serviços incluídos: Portainer + Traefik, N8N, Evolution API, Redis, PostgreSQL, RabbitMQ
# Autor: Seu Nome
# GitHub: https://github.com/seuusuario/setup-enxuto
# Instalação: bash <(curl -sSL setup.seudominio.com.br)

clear

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}===========================================${NC}"
echo -e "${BLUE}         SETUP ENXUTO v1.0${NC}"
echo -e "${BLUE}      Versão personalizada${NC}"
echo -e "${BLUE}===========================================${NC}"
echo ""

# Função para verificar se está rodando como root
check_root() {
    if [ "$EUID" -ne 0 ]; then
        echo -e "${RED}Este script deve ser executado como root!${NC}"
        echo "Use: sudo $0"
        exit 1
    fi
}

# Função para instalar dependências
install_dependencies() {
    echo -e "${YELLOW}Instalando dependências...${NC}"
    
    # Atualizar sistema
    apt update > /dev/null 2>&1
    apt upgrade -y > /dev/null 2>&1
    
    # Instalar dependências básicas
    apt install -y curl wget git unzip software-properties-common apt-transport-https ca-certificates gnupg lsb-release > /dev/null 2>&1
    
    # Instalar Docker
    if ! command -v docker &> /dev/null; then
        curl -fsSL https://get.docker.com | sh > /dev/null 2>&1
        systemctl enable docker
        systemctl start docker
        echo -e "${GREEN}✓ Docker instalado${NC}"
    else
        echo -e "${GREEN}✓ Docker já instalado${NC}"
    fi
    
    # Instalar Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        chmod +x /usr/local/bin/docker-compose
        echo -e "${GREEN}✓ Docker Compose instalado${NC}"
    else
        echo -e "${GREEN}✓ Docker Compose já instalado${NC}"
    fi
    
    echo ""
}

# Função para coletar dados do usuário
collect_user_data() {
    echo -e "${BLUE}Configuração inicial:${NC}"
    echo ""
    
    read -p "Nome do servidor (ex: meuservidor): " SERVER_NAME
    read -p "Nome da rede interna (ex: app_network): " NETWORK_NAME
    read -p "Email para certificados SSL: " SSL_EMAIL
    read -p "Domínio principal (ex: meudominio.com): " MAIN_DOMAIN
    
    echo ""
    echo -e "${BLUE}Configurações de banco de dados:${NC}"
    read -p "Usuário do PostgreSQL: " POSTGRES_USER
    read -s -p "Senha do PostgreSQL: " POSTGRES_PASSWORD
    echo ""
    read -p "Nome do banco PostgreSQL: " POSTGRES_DB
    
    echo ""
    echo -e "${BLUE}Configurações do RabbitMQ:${NC}"
    read -p "Usuário do RabbitMQ: " RABBITMQ_USER
    read -s -p "Senha do RabbitMQ: " RABBITMQ_PASSWORD
    echo ""
    
    echo ""
    echo -e "${BLUE}Configurações do N8N:${NC}"
    read -p "Subdomínio do N8N (ex: n8n): " N8N_SUBDOMAIN
    
    echo ""
    echo -e "${BLUE}Configurações da Evolution API:${NC}"
    read -p "Subdomínio da Evolution API (ex: evolution): " EVOLUTION_SUBDOMAIN
    read -p "JWT Secret da Evolution API: " EVOLUTION_JWT_SECRET
    
    echo ""
}

# Função para criar estrutura de diretórios
create_directories() {
    echo -e "${YELLOW}Criando estrutura de diretórios...${NC}"
    
    mkdir -p /opt/setup-enxuto/{traefik,portainer,n8n,evolution-api,postgres,redis,rabbitmq}
    mkdir -p /opt/setup-enxuto/traefik/{data,logs}
    mkdir -p /opt/setup-enxuto/portainer/data
    mkdir -p /opt/setup-enxuto/n8n/data
    mkdir -p /opt/setup-enxuto/evolution-api/{data,instances}
    mkdir -p /opt/setup-enxuto/postgres/data
    mkdir -p /opt/setup-enxuto/redis/data
    mkdir -p /opt/setup-enxuto/rabbitmq/data
    
    echo -e "${GREEN}✓ Diretórios criados${NC}"
}

# Função para criar docker-compose.yml principal
create_docker_compose() {
    echo -e "${YELLOW}Criando arquivo docker-compose.yml...${NC}"
    
    cat > /opt/setup-enxuto/docker-compose.yml << EOF
version: '3.8'

networks:
  ${NETWORK_NAME}:
    external: true

services:
  # Traefik - Proxy Reverso
  traefik:
    image: traefik:v3.0
    container_name: traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/data:/data
      - ./traefik/logs:/logs
    command:
      - --api.dashboard=true
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=${NETWORK_NAME}
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencrypt.acme.tlschallenge=true
      - --certificatesresolvers.letsencrypt.acme.email=${SSL_EMAIL}
      - --certificatesresolvers.letsencrypt.acme.storage=/data/acme.json
      - --log.level=INFO
      - --log.filepath=/logs/traefik.log
      - --accesslog=true
      - --accesslog.filepath=/logs/access.log
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(\`traefik.${MAIN_DOMAIN}\`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"
    networks:
      - ${NETWORK_NAME}

  # Portainer - Gerenciamento de Containers
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./portainer/data:/data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.rule=Host(\`portainer.${MAIN_DOMAIN}\`)"
      - "traefik.http.routers.portainer.entrypoints=websecure"
      - "traefik.http.routers.portainer.tls.certresolver=letsencrypt"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
    networks:
      - ${NETWORK_NAME}

  # PostgreSQL
  postgres:
    image: postgres:15
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./postgres/data:/var/lib/postgresql/data
    networks:
      - ${NETWORK_NAME}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis
  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    volumes:
      - ./redis/data:/data
    command: redis-server --appendonly yes
    networks:
      - ${NETWORK_NAME}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    volumes:
      - ./rabbitmq/data:/var/lib/rabbitmq
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.rabbitmq.rule=Host(\`rabbitmq.${MAIN_DOMAIN}\`)"
      - "traefik.http.routers.rabbitmq.entrypoints=websecure"
      - "traefik.http.routers.rabbitmq.tls.certresolver=letsencrypt"
      - "traefik.http.services.rabbitmq.loadbalancer.server.port=15672"
    networks:
      - ${NETWORK_NAME}
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # N8N
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    restart: unless-stopped
    environment:
      - N8N_HOST=${N8N_SUBDOMAIN}.${MAIN_DOMAIN}
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - WEBHOOK_URL=https://${N8N_SUBDOMAIN}.${MAIN_DOMAIN}/
      - GENERIC_TIMEZONE=America/Sao_Paulo
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
      - DB_POSTGRESDB_USER=${POSTGRES_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
      - N8N_ENCRYPTION_KEY=\$(openssl rand -base64 32)
    volumes:
      - ./n8n/data:/home/node/.n8n
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.n8n.rule=Host(\`${N8N_SUBDOMAIN}.${MAIN_DOMAIN}\`)"
      - "traefik.http.routers.n8n.entrypoints=websecure"
      - "traefik.http.routers.n8n.tls.certresolver=letsencrypt"
      - "traefik.http.services.n8n.loadbalancer.server.port=5678"
    networks:
      - ${NETWORK_NAME}
    depends_on:
      - postgres
      - redis

  # Evolution API
  evolution-api:
    image: atendai/evolution-api:v2.1.1
    container_name: evolution-api
    restart: unless-stopped
    environment:
      - SERVER_TYPE=http
      - SERVER_PORT=8080
      - CORS_ORIGIN=*
      - CORS_METHODS=POST,GET,PUT,DELETE
      - CORS_CREDENTIALS=true
      - LOG_LEVEL=ERROR
      - LOG_COLOR=true
      - LOG_BAILEYS=error
      - DEL_INSTANCE=false
      - DATABASE_ENABLED=true
      - DATABASE_CONNECTION_URI=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?schema=evolution
      - DATABASE_CONNECTION_CLIENT_NAME=evolution_api
      - REDIS_ENABLED=true
      - REDIS_URI=redis://redis:6379
      - REDIS_PREFIX_KEY=evolution
      - RABBITMQ_ENABLED=true
      - RABBITMQ_URI=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672
      - RABBITMQ_EXCHANGE_NAME=evolution
      - RABBITMQ_GLOBAL_ENABLED=true
      - RABBITMQ_EVENTS_APPLICATION_STARTUP=false
      - RABBITMQ_EVENTS_INSTANCE_CREATE=true
      - RABBITMQ_EVENTS_INSTANCE_DELETE=true
      - RABBITMQ_EVENTS_QRCODE_UPDATED=true
      - RABBITMQ_EVENTS_MESSAGES_SET=true
      - RABBITMQ_EVENTS_MESSAGES_UPSERT=true
      - RABBITMQ_EVENTS_MESSAGES_UPDATE=true
      - RABBITMQ_EVENTS_MESSAGES_DELETE=true
      - RABBITMQ_EVENTS_SEND_MESSAGE=true
      - RABBITMQ_EVENTS_CONTACTS_SET=true
      - RABBITMQ_EVENTS_CONTACTS_UPSERT=true
      - RABBITMQ_EVENTS_CONTACTS_UPDATE=true
      - RABBITMQ_EVENTS_PRESENCE_UPDATE=true
      - RABBITMQ_EVENTS_CHATS_SET=true
      - RABBITMQ_EVENTS_CHATS_UPSERT=true
      - RABBITMQ_EVENTS_CHATS_UPDATE=true
      - RABBITMQ_EVENTS_CHATS_DELETE=true
      - RABBITMQ_EVENTS_GROUPS_UPSERT=true
      - RABBITMQ_EVENTS_GROUP_UPDATE=true
      - RABBITMQ_EVENTS_GROUP_PARTICIPANTS_UPDATE=true
      - RABBITMQ_EVENTS_CONNECTION_UPDATE=true
      - RABBITMQ_EVENTS_CALL=true
      - RABBITMQ_EVENTS_TYPEBOT_START=false
      - RABBITMQ_EVENTS_TYPEBOT_CHANGE_STATUS=false
      - JWT_SECRET=${EVOLUTION_JWT_SECRET}
      - AUTHENTICATION_TYPE=jwt
      - AUTHENTICATION_API_KEY=B6D711FCDE4D4FD5936544120E713976
      - AUTHENTICATION_EXPOSE_IN_FETCH_INSTANCES=true
      - QRCODE_LIMIT=30
      - QRCODE_COLOR=#198754
      - TYPEBOT_ENABLED=false
      - CHATWOOT_ENABLED=false
      - CACHE_REDIS_ENABLED=true
      - CACHE_REDIS_URI=redis://redis:6379
      - CACHE_REDIS_PREFIX_KEY=evolution
      - CACHE_REDIS_SAVE_INSTANCES=false
      - CACHE_LOCAL_ENABLED=false
      - CONFIG_SESSION_PHONE_CLIENT=Evolution API
      - CONFIG_SESSION_PHONE_NAME=Chrome
      - QRCODE_LIMIT=30
      - INSTANCE_DELETE_TIME=false
      - DEL_INSTANCE=false
    volumes:
      - ./evolution-api/instances:/evolution/instances
      - ./evolution-api/data:/evolution/store
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.evolution.rule=Host(\`${EVOLUTION_SUBDOMAIN}.${MAIN_DOMAIN}\`)"
      - "traefik.http.routers.evolution.entrypoints=websecure"
      - "traefik.http.routers.evolution.tls.certresolver=letsencrypt"
      - "traefik.http.services.evolution.loadbalancer.server.port=8080"
    networks:
      - ${NETWORK_NAME}
    depends_on:
      - postgres
      - redis
      - rabbitmq
EOF

    echo -e "${GREEN}✓ Docker Compose criado${NC}"
}

# Função para criar rede Docker
create_network() {
    echo -e "${YELLOW}Criando rede Docker...${NC}"
    
    if ! docker network ls | grep -q ${NETWORK_NAME}; then
        docker network create ${NETWORK_NAME}
        echo -e "${GREEN}✓ Rede ${NETWORK_NAME} criada${NC}"
    else
        echo -e "${GREEN}✓ Rede ${NETWORK_NAME} já existe${NC}"
    fi
}

# Função para configurar permissões
set_permissions() {
    echo -e "${YELLOW}Configurando permissões...${NC}"
    
    # Traefik
    touch /opt/setup-enxuto/traefik/data/acme.json
    chmod 600 /opt/setup-enxuto/traefik/data/acme.json
    
    # Definir proprietário correto para volumes
    chown -R 1001:1001 /opt/setup-enxuto/n8n/data
    chown -R 999:999 /opt/setup-enxuto/postgres/data
    chown -R 999:999 /opt/setup-enxuto/redis/data
    chown -R 999:999 /opt/setup-enxuto/rabbitmq/data
    
    echo -e "${GREEN}✓ Permissões configuradas${NC}"
}

# Função para iniciar serviços
start_services() {
    echo -e "${YELLOW}Iniciando serviços...${NC}"
    
    cd /opt/setup-enxuto
    
    # Iniciar apenas traefik e portainer primeiro
    docker-compose up -d traefik portainer
    sleep 10
    
    # Iniciar bancos de dados
    docker-compose up -d postgres redis rabbitmq
    sleep 30
    
    # Iniciar aplicações
    docker-compose up -d n8n evolution-api
    
    echo -e "${GREEN}✓ Todos os serviços iniciados${NC}"
}

# Função para mostrar informações finais
show_final_info() {
    echo ""
    echo -e "${GREEN}===========================================${NC}"
    echo -e "${GREEN}         INSTALAÇÃO CONCLUÍDA!${NC}"
    echo -e "${GREEN}===========================================${NC}"
    echo ""
    echo -e "${BLUE}Serviços disponíveis:${NC}"
    echo ""
    echo -e "🌐 Traefik Dashboard: https://traefik.${MAIN_DOMAIN}"
    echo -e "🐳 Portainer: https://portainer.${MAIN_DOMAIN}"
    echo -e "🔧 N8N: https://${N8N_SUBDOMAIN}.${MAIN_DOMAIN}"
    echo -e "📱 Evolution API: https://${EVOLUTION_SUBDOMAIN}.${MAIN_DOMAIN}"
    echo -e "🐰 RabbitMQ Management: https://rabbitmq.${MAIN_DOMAIN}"
    echo ""
    echo -e "${BLUE}Informações de acesso:${NC}"
    echo ""
    echo -e "📊 RabbitMQ:"
    echo -e "   Usuário: ${RABBITMQ_USER}"
    echo -e "   Senha: ${RABBITMQ_PASSWORD}"
    echo ""
    echo -e "🗄️ PostgreSQL:"
    echo -e "   Host: postgres (interno) ou ${MAIN_DOMAIN}:5432 (externo)"
    echo -e "   Usuário: ${POSTGRES_USER}"
    echo -e "   Banco: ${POSTGRES_DB}"
    echo ""
    echo -e "🔴 Redis:"
    echo -e "   Host: redis (interno) ou ${MAIN_DOMAIN}:6379 (externo)"
    echo ""
    echo -e "${YELLOW}Comandos úteis:${NC}"
    echo ""
    echo -e "Ver logs: docker-compose logs -f [serviço]"
    echo -e "Reiniciar: docker-compose restart [serviço]"
    echo -e "Parar tudo: docker-compose down"
    echo -e "Iniciar tudo: docker-compose up -d"
    echo ""
    echo -e "${BLUE}Diretório da instalação: /opt/setup-enxuto${NC}"
    echo ""
}

# Função principal
main() {
    check_root
    install_dependencies
    collect_user_data
    create_directories
    create_network
    create_docker_compose
    set_permissions
    start_services
    show_final_info
}

# Executar função principal
main
